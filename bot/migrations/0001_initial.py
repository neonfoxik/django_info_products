# Generated by Django 5.1.6 on 2025-06-10 16:44

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdminContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_contact', models.CharField(default='Для связи с администратором напишите на email: admin@example.com', max_length=255, verbose_name='Контакт администратора')),
                ('support_contact', models.CharField(default='Для связи с поддержкой напишите на email: support@example.com', max_length=255, verbose_name='Контакт поддержки')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Контакт администратора',
                'verbose_name_plural': 'Контакты администраторов',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='goods_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название категории')),
            ],
            options={
                'verbose_name': 'Категория товаров',
                'verbose_name_plural': 'Категории товаров',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('telegram_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('user_name', models.CharField(max_length=35, verbose_name='Имя')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Является ли администратором')),
                ('is_ai', models.BooleanField(default=False, verbose_name='Используется ли AI')),
                ('chat_history', models.JSONField(blank=True, default=dict, null=True, verbose_name='История переписки пользователя')),
                ('warranty_data', models.JSONField(blank=True, default=dict, null=True, verbose_name='Данные о гарантиях и скриншотах')),
                ('screenshots_count', models.IntegerField(default=0, verbose_name='Количество отправленных скриншотов за день')),
                ('last_screenshot_date', models.DateField(default=django.utils.timezone.now, verbose_name='Дата последней отправки скриншота')),
                ('messages_count', models.IntegerField(default=0, verbose_name='Количество сообщений в текущем действии')),
                ('last_message_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='ID последнего сообщения')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='goods',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название товара')),
                ('extended_warranty', models.FloatField(default=1.0, verbose_name='Срок расширенной гарантии (в годах)')),
                ('is_returned', models.BooleanField(default=False, verbose_name='Товар возвращен')),
                ('parent_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bot.goods_category', verbose_name='Родительская категория')),
            ],
            options={
                'verbose_name': 'Название товара',
                'verbose_name_plural': 'Названия товаров',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/images/', verbose_name='Изображение товара')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Основное изображение')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bot.goods', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Изображение товара',
                'verbose_name_plural': 'Изображения товаров',
                'ordering': ['-is_primary', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('instructions', 'Инструкция'), ('warranty', 'Гарантия'), ('faq', 'FAQ')], max_length=20, verbose_name='Тип документа')),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='products/documents/', verbose_name='PDF документ')),
                ('text_content', models.TextField(blank=True, null=True, verbose_name='Текстовое содержимое')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='bot.goods', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Документ товара',
                'verbose_name_plural': 'Документы товаров',
                'ordering': ['-created_at'],
                'unique_together': {('product', 'document_type')},
            },
        ),
    ]
