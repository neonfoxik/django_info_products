from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from bot import bot, logger
from bot.models import User, goods_category, goods, WarrantyIssue, WarrantyRequest, Support, WarrantyQuestion, WarrantyAnswer
from bot.handlers.support import warranty_to_support_context
from bot.keyboards import get_support_platform_markup


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π
warranty_state = {}
 # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: –ø–æ chat_id —Ö—Ä–∞–Ω–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
warranty_qna_state = {}


def _start_warranty_questionnaire(user: User, warranty_request: WarrantyRequest, chat_id: int) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç ‚Äî —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
    questions = list(WarrantyQuestion.objects.filter(is_active=True).order_by('order','id'))
    if not questions:
        _finish_questionnaire_and_ask_platform(user, warranty_request, chat_id)
        return
    warranty_qna_state[chat_id] = {
        'request_id': warranty_request.id,
        'question_ids': [q.id for q in questions],
        'index': 0,
    }
    first_q = questions[0]
    bot.send_message(chat_id=chat_id, text=f"‚ùì {first_q.text}")


def _finish_questionnaire_and_ask_platform(user: User, warranty_request: WarrantyRequest, chat_id: int) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
    details = [
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å–ª—É—á–∞–π.",
    ]
    try:
        if warranty_request.product:
            details.append(f"–¢–æ–≤–∞—Ä: {warranty_request.product.name}")
        if warranty_request.issue:
            details.append(f"–ü—Ä–æ–±–ª–µ–º–∞: {warranty_request.issue.title}")
        if warranty_request.custom_issue_description:
            details.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {warranty_request.custom_issue_description}")
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        answers = WarrantyAnswer.objects.filter(request=warranty_request).select_related('question').order_by('created_at')
        if answers.exists():
            details.append("\n–û—Ç–≤–µ—Ç—ã –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:")
            for a in answers:
                q_text = a.question.text if a.question_id else "–í–æ–ø—Ä–æ—Å"
                details.append(f"- {q_text}\n  –û—Ç–≤–µ—Ç: {a.answer_text}")
    except Exception:
        pass
    warranty_to_support_context[chat_id] = {
        'text': "\n".join(details)
    }
    bot.send_message(
        chat_id=chat_id,
        text=(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –≥–¥–µ –±—ã–ª–∞ –ø–æ–∫—É–ø–∫–∞, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        ),
        reply_markup=get_support_platform_markup()
    )


def process_warranty_questionnaire_answer(message: Message) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ."""
    chat_id = message.chat.id
    state = warranty_qna_state.get(chat_id)
    if not state:
        return False
    try:
        user = User.objects.get(telegram_id=chat_id)
        warranty_request = WarrantyRequest.objects.get(id=state['request_id'])
        q_ids = state['question_ids']
        idx = state['index']
        # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        current_q_id = q_ids[idx]
        question = WarrantyQuestion.objects.get(id=current_q_id)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        WarrantyAnswer.objects.update_or_create(
            request=warranty_request,
            question=question,
            defaults={'answer_text': message.text or ''}
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        idx += 1
        if idx < len(q_ids):
            state['index'] = idx
            next_q = WarrantyQuestion.objects.get(id=q_ids[idx])
            bot.send_message(chat_id=chat_id, text=f"‚ùì {next_q.text}")
            return True
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
            warranty_qna_state.pop(chat_id, None)
            _finish_questionnaire_and_ask_platform(user, warranty_request, chat_id)
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∫–µ—Ç—ã –≥–∞—Ä–∞–Ω—Ç–∏–∏: {e}")
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∑–∞–≤–µ—Ä—à–∏–º –æ–ø—Ä–æ—Å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º
        try:
            warranty_qna_state.pop(chat_id, None)
            user = User.objects.get(telegram_id=chat_id)
            warranty_request = WarrantyRequest.objects.filter(user=user).order_by('-created_at').first()
            if warranty_request:
                _finish_questionnaire_and_ask_platform(user, warranty_request, chat_id)
        except Exception:
            pass
        return True


def warranty_start(call: CallbackQuery) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        categories = goods_category.objects.all()
        
        if not categories.exists():
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            
            bot.send_message(
                chat_id=call.message.chat.id,
                text="üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                )
            )
            bot.answer_callback_query(call.id)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        markup = InlineKeyboardMarkup()
        for category in categories:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            products_count = goods.objects.filter(
                parent_category=category,
                is_active=True
            ).count()
            
            if products_count > 0:
                markup.add(
                    InlineKeyboardButton(
                        f"üì¶ {category.name} ({products_count})",
                        callback_data=f"warranty_category_{category.id}"
                    )
                )
        
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            chat_id=call.message.chat.id,
            text="üîß *–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏*\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
            parse_mode='Markdown',
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ warranty_start: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def warranty_select_category(call: CallbackQuery) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã"""
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        category_id = int(call.data.split('_')[-1])
        category = goods_category.objects.get(id=category_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products = goods.objects.filter(
            parent_category=category,
            is_active=True
        )
        
        if not products.exists():
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            
            bot.send_message(
                chat_id=call.message.chat.id,
                text=f"üòî –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}' –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="warranty_start")
                )
            )
            bot.answer_callback_query(call.id)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        markup = InlineKeyboardMarkup()
        for product in products:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            issues_count = WarrantyIssue.objects.filter(
                product=product,
                is_active=True
            ).count()
            
            markup.add(
                InlineKeyboardButton(
                    f"üì± {product.name}" + (f" ({issues_count})" if issues_count > 0 else ""),
                    callback_data=f"warranty_product_{product.id}"
                )
            )
        
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="warranty_start"))
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            chat_id=call.message.chat.id,
            text=f"üîß *–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏*\n\n"
                 f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{category.name}*\n\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–æ–≤–∞—Ä:",
            parse_mode='Markdown',
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ warranty_select_category: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def warranty_select_product(call: CallbackQuery) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        product_id = int(call.data.split('_')[-1])
        product = goods.objects.get(id=product_id)
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏
        warranty_request, created = WarrantyRequest.objects.get_or_create(
            user=user,
            status='selecting_issue',
            defaults={'product': product}
        )
        
        if not created:
            warranty_request.product = product
            warranty_request.status = 'selecting_issue'
            warranty_request.save()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        issues = WarrantyIssue.objects.filter(
            product=product,
            is_active=True
        ).order_by('order', 'title')
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        markup = InlineKeyboardMarkup()
        
        if issues.exists():
            for issue in issues:
                markup.add(
                    InlineKeyboardButton(
                        f"‚ö†Ô∏è {issue.title}",
                        callback_data=f"warranty_issue_{issue.id}"
                    )
                )
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"
        markup.add(
            InlineKeyboardButton(
                "‚ùì –î—Ä—É–≥–æ–µ",
                callback_data=f"warranty_other_{product_id}"
            )
        )
        markup.add(
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"warranty_category_{product.parent_category.id}"
            )
        )
        
        text = f"üîß *–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏*\n\n"
        text += f"–¢–æ–≤–∞—Ä: *{product.name}*\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å —Å–ª–æ–º–∞–ª–æ—Å—å:"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ—á–Ω–µ–º –ø—Ä–æ–±–ª–µ–º
        bot.send_message(
            chat_id=call.message.chat.id,
            text=text,
            parse_mode='Markdown',
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ warranty_select_product: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def warranty_select_issue(call: CallbackQuery) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ–±–ª–µ–º—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ"""
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        issue_id = int(call.data.split('_')[-1])
        issue = WarrantyIssue.objects.get(id=issue_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏
        warranty_request = WarrantyRequest.objects.filter(
            user=user,
            status='selecting_issue'
        ).first()
        
        if warranty_request:
            warranty_request.issue = issue
            warranty_request.status = 'got_solution'
            warranty_request.save()
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            warranty_request = WarrantyRequest.objects.create(
                user=user,
                product=issue.product,
                issue=issue,
                status='got_solution'
            )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("‚úÖ –ü–æ–º–æ–≥–ª–æ", callback_data=f"warranty_helped_{warranty_request.id}"),
            InlineKeyboardButton("‚ùå –ù–µ –ø–æ–º–æ–≥–ª–æ", callback_data=f"warranty_not_helped_{warranty_request.id}")
        )
        markup.add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"warranty_product_{issue.product.id}")
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"üîß *–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã*\n\n"
        text += f"–¢–æ–≤–∞—Ä: *{issue.product.name}*\n"
        text += f"–ü—Ä–æ–±–ª–µ–º–∞: *{issue.title}*\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        has_text = bool(issue.solution_template and issue.solution_template.strip())
        has_file = bool(issue.solution_file)
        
        if has_text:
            text += f"üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n\n{issue.solution_template}\n\n"
        
        if has_file:
            text += "üìé *–§–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ*\n\n"
        
        if not has_text and not has_file:
            text += "‚ÑπÔ∏è –†–µ—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
        
        text += "–ü–æ–º–æ–≥–ª–æ –ª–∏ —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ?"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        msg = bot.send_message(
            chat_id=call.message.chat.id,
            text=text,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if has_file:
            try:
                with open(issue.solution_file.path, 'rb') as file:
                    bot.send_document(
                        chat_id=call.message.chat.id,
                        document=file,
                        caption=f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {issue.title}"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —Ä–µ—à–µ–Ω–∏—è: {e}")
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ warranty_select_issue: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def warranty_helped(call: CallbackQuery) -> None:
    """–†–µ—à–µ–Ω–∏–µ –ø–æ–º–æ–≥–ª–æ"""
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        request_id = int(call.data.split('_')[-1])
        
        warranty_request = WarrantyRequest.objects.get(id=request_id)
        warranty_request.solution_helped = True
        warranty_request.status = 'closed'
        warranty_request.save()
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            chat_id=call.message.chat.id,
            text="‚úÖ *–û—Ç–ª–∏—á–Ω–æ!*\n\n"
                 "–†–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å! üòä\n\n"
                 "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!",
            parse_mode='Markdown',
            reply_markup=markup
        )
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ warranty_helped: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def warranty_not_helped(call: CallbackQuery) -> None:
    """–†–µ—à–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        request_id = int(call.data.split('_')[-1])
        
        warranty_request = WarrantyRequest.objects.get(id=request_id)
        warranty_request.solution_helped = False
        warranty_request.status = 'needs_manager'
        warranty_request.save()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—à–µ–Ω–∏–µ–º/–∫–Ω–æ–ø–∫–∞–º–∏, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ–π—á–∞—Å –≤–∏—Å–∏—Ç
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception:
            pass

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        try:
            _start_warranty_questionnaire(user, warranty_request, call.message.chat.id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å –≥–∞—Ä–∞–Ω—Ç–∏–π: {e}")

        # –ì–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        details = [
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞.",
        ]
        try:
            if warranty_request.product:
                details.append(f"–¢–æ–≤–∞—Ä: {warranty_request.product.name}")
            if warranty_request.issue:
                details.append(f"–ü—Ä–æ–±–ª–µ–º–∞: {warranty_request.issue.title}")
            if warranty_request.custom_issue_description:
                details.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {warranty_request.custom_issue_description}")
        except Exception:
            pass
        details.append("–°—Ç–∞—Ç—É—Å: —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ.")
        warranty_to_support_context[call.message.chat.id] = {
            'text': "\n".join(details)
        }

        # –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã (_finish_questionnaire_and_ask_platform)
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ warranty_not_helped: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def warranty_other(call: CallbackQuery) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î—Ä—É–≥–æ–µ" - –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        product_id = int(call.data.split('_')[-1])
        product = goods.objects.get(id=product_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏
        warranty_request = WarrantyRequest.objects.filter(
            user=user,
            status='selecting_issue'
        ).first()
        
        if warranty_request:
            warranty_request.custom_issue_description = "–î—Ä—É–≥–æ–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–î—Ä—É–≥–æ–µ')"
            warranty_request.status = 'needs_manager'
            warranty_request.save()
        else:
            warranty_request = WarrantyRequest.objects.create(
                user=user,
                product=product,
                custom_issue_description="–î—Ä—É–≥–æ–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–î—Ä—É–≥–æ–µ')",
                status='needs_manager'
            )
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏/–∫–Ω–æ–ø–∫–∞–º–∏
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception:
            pass

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        try:
            _start_warranty_questionnaire(user, warranty_request, call.message.chat.id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å –≥–∞—Ä–∞–Ω—Ç–∏–π: {e}")

        # –ì–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å—Ç–∞—Ä—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        details = [
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞.",
            f"–¢–æ–≤–∞—Ä: {product.name}",
            "–û–ø–∏—Å–∞–Ω–∏–µ: –î—Ä—É–≥–æ–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–î—Ä—É–≥–æ–µ')",
            "–°—Ç–∞—Ç—É—Å: –Ω—É–∂–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä.",
        ]
        warranty_to_support_context[call.message.chat.id] = {
            'text': "\n".join(details)
        }

        # –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã (_finish_questionnaire_and_ask_platform)
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ warranty_other: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

