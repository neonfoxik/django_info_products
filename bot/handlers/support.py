from telebot.types import Message, CallbackQuery
from django.utils import timezone
from bot import bot
from bot.models import User, SupportTicket, SupportMessage, OwnerSettings
from bot.texts import (
    SUPPORT_WELCOME_TEXT, SUPPORT_OZON_START_TEXT, SUPPORT_WILDBERRIES_START_TEXT,
    SUPPORT_MESSAGE_RECEIVED_TEXT, SUPPORT_TICKET_CLOSED_TEXT,
    ADMIN_NEW_TICKET_TEXT, ADMIN_TICKET_ASSIGNED_TEXT, ADMIN_TICKET_ALREADY_ASSIGNED_TEXT,
    ADMIN_RESPONSE_SENT_TEXT, ADMIN_TICKET_FINISHED_TEXT,
    ADMIN_REMINDER_TEXT, OWNER_NOTIFICATION_TEXT
)
from bot.keyboards import (
    get_support_platform_markup, get_close_ticket_markup, 
    get_admin_ticket_markup, get_admin_response_markup, main_markup,
    get_user_tickets_list_markup, get_user_ticket_actions_markup, get_admin_my_tickets_markup, get_ticket_files_markup
)
from django.utils import timezone
from django.db import transaction
import logging

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
support_state = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤, –æ—Ç–≤–µ—á–∞—é—â–∏—Ö –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
admin_response_state = {}
broadcast_state = {}


# ===== Helpers for admin roles and permissions =====
def is_any_admin(u: User) -> bool:
    return bool(getattr(u, 'is_super_admin', False) or getattr(u, 'is_ozon_admin', False) or getattr(u, 'is_wb_admin', False) or getattr(u, 'is_admin', False))


def is_super_admin(u: User) -> bool:
    return bool(getattr(u, 'is_super_admin', False))


def admin_can_handle_ticket(u: User, t: SupportTicket) -> bool:
    if is_super_admin(u) or getattr(u, 'is_admin', False):
        return True
    if t.platform == 'ozon' and getattr(u, 'is_ozon_admin', False):
        return True
    if t.platform == 'wildberries' and getattr(u, 'is_wb_admin', False):
        return True
    return False


def get_relevant_admins_for_ticket(t: SupportTicket):
    qs = User.objects.none()
    base_all = User.objects.filter(is_admin=True)
    super_admins = User.objects.filter(is_super_admin=True)
    if t.platform == 'ozon':
        platform_admins = User.objects.filter(is_ozon_admin=True)
    else:
        platform_admins = User.objects.filter(is_wb_admin=True)
    return (base_all | super_admins | platform_admins).distinct()


def show_support_menu(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    try:
        logger.info(f"[DEBUG] show_support_menu –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.id}")
        print(f"[DEBUG] show_support_menu –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.id}")
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=SUPPORT_WELCOME_TEXT,
            reply_markup=get_support_platform_markup()
        )
        bot.answer_callback_query(call.id)
        
        logger.info(f"[DEBUG] show_support_menu –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"[DEBUG] show_support_menu –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_support_menu: {e}")
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ show_support_menu: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def show_user_tickets(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        # –ê–∫—Ç–∏–≤–Ω—ã–µ: open –∏ in_progress
        tickets = list(user.support_tickets.filter(status__in=["open", "in_progress"]).order_by("-created_at"))

        if not tickets:
            bot.answer_callback_query(call.id, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ—Ç")
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.",
                reply_markup=get_support_platform_markup()
            )
            return

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üóÇ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:",
            reply_markup=get_user_tickets_list_markup(tickets)
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_user_tickets: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def show_user_ticket_actions(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é"""
    try:
        ticket_id = int(call.data.split("_")[-1])
        ticket = SupportTicket.objects.get(id=ticket_id)

        if ticket.status == "closed":
            bot.answer_callback_query(call.id, "–û–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ")
            return

        header = (
            f"üìã –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.id}\n"
            f"üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {ticket.get_platform_display()}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {ticket.get_status_display()}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=header,
            reply_markup=get_user_ticket_actions_markup(ticket.id)
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_user_ticket_actions: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def user_close_ticket(call: CallbackQuery) -> None:
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ (–∏–∑ —Å–ø–∏—Å–∫–∞)"""
    try:
        ticket_id = int(call.data.split("_")[-1])
        ticket = SupportTicket.objects.get(id=ticket_id)
        ticket.status = 'closed'
        ticket.closed_at = timezone.now()
        ticket.save()

        # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
        if ticket.user.telegram_id in support_state:
            del support_state[ticket.user.telegram_id]

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ",
            reply_markup=get_support_platform_markup()
        )
        
        # –£–≤–µ–¥–æ–º–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        if ticket.assigned_admin:
            try:
                bot.send_message(ticket.assigned_admin.telegram_id, f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.id}")
            except:
                pass

        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_close_ticket: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def user_open_ticket(call: CallbackQuery) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
    try:
        ticket_id = int(call.data.split("_")[-1])
        ticket = SupportTicket.objects.get(id=ticket_id)

        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        support_state[call.message.chat.id] = {
            'ticket_id': ticket.id,
            'platform': ticket.platform
        }

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                "‚úçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é "
                f"#{ticket.id}. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
        )
        # –ö–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É
        try:
            _notify_admins_user_continues(ticket)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ #{ticket.id}: {e}")
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_open_ticket: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def admin_start_broadcast(call: CallbackQuery) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        admin = User.objects.get(telegram_id=call.message.chat.id)
        if not admin.is_admin:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        broadcast_state[call.message.chat.id] = {"awaiting_text": True}
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_start_broadcast: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def handle_admin_broadcast_text(message: Message) -> bool:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    try:
        if message.chat.id not in broadcast_state or not broadcast_state[message.chat.id].get("awaiting_text"):
            return False
        broadcast_state[message.chat.id] = {"text": message.text, "confirm": True}
        from bot.keyboards import get_broadcast_confirm_markup
        bot.send_message(
            chat_id=message.chat.id,
            text=f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{message.text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
            reply_markup=get_broadcast_confirm_markup()
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_broadcast_text: {e}")
        return False


def admin_broadcast_confirm(call: CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        state = broadcast_state.get(call.message.chat.id)
        if not state or "text" not in state:
            bot.answer_callback_query(call.id, "–ù–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        if call.data == "broadcast_cancel":
            broadcast_state.pop(call.message.chat.id, None)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
            bot.answer_callback_query(call.id)
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞
        text = state["text"]
        from bot.models import User as UModel
        sent = 0
        for u in UModel.objects.all():
            try:
                bot.send_message(u.telegram_id, text)
                sent += 1
            except Exception:
                continue
        broadcast_state.pop(call.message.chat.id, None)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–π: {sent}"
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_broadcast_confirm: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def send_broadcast_to_all_users(broadcast_message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        from bot.models import BroadcastMessage
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = User.objects.filter(is_active=True)
        sent_count = 0
        failed_count = 0
        
        for user in users:
            try:
                bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üì¢ {broadcast_message.message_text}"
                )
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                failed_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcast_message.is_sent = True
        broadcast_message.sent_at = timezone.now()
        broadcast_message.save()
        
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –æ—à–∏–±–æ–∫: {failed_count}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_broadcast_to_all_users: {e}")


def start_support_ozon(call: CallbackQuery) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –û–∑–æ–Ω"""
    try:
        logger.info(f"[DEBUG] start_support_ozon –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.id}")
        print(f"[DEBUG] start_support_ozon –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.id}")
        
        user, created = User.objects.get_or_create(telegram_id=call.message.chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        existing_ticket = SupportTicket.objects.filter(
            user=user, 
            status__in=['open', 'in_progress']
        ).first()
        
        if existing_ticket:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–∫–µ—Ç–∞
            support_state[call.message.chat.id] = {
                'ticket_id': existing_ticket.id,
                'platform': existing_ticket.platform
            }

            # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –∑–¥–µ—Å—å; —É–≤–µ–¥–æ–º–∏–º –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=(
                    f"‚úçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ –≤–∞—à–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é #{existing_ticket.id}.\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )
            )
            bot.answer_callback_query(call.id)
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        ticket = SupportTicket.objects.create(
            user=user,
            platform='ozon',
            status='open'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        try:
            notify_admins_about_new_ticket(ticket)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ #{ticket.id}: {e}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        support_state[call.message.chat.id] = {
            'ticket_id': ticket.id,
            'platform': 'ozon'
        }
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=SUPPORT_OZON_START_TEXT,
            reply_markup=None
        )
        
        # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏, —É–≤–µ–¥–æ–º–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_support_ozon: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def start_support_wildberries(call: CallbackQuery) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑"""
    try:
        logger.info(f"[DEBUG] start_support_wildberries –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.id}")
        print(f"[DEBUG] start_support_wildberries –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.id}")
        
        user, created = User.objects.get_or_create(telegram_id=call.message.chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        existing_ticket = SupportTicket.objects.filter(
            user=user, 
            status__in=['open', 'in_progress']
        ).first()
        
        if existing_ticket:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–∫–µ—Ç–∞
            support_state[call.message.chat.id] = {
                'ticket_id': existing_ticket.id,
                'platform': existing_ticket.platform
            }

            # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –∑–¥–µ—Å—å; —É–≤–µ–¥–æ–º–∏–º –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=(
                    f"‚úçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ –≤–∞—à–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é #{existing_ticket.id}.\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )
            )
            bot.answer_callback_query(call.id)
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        ticket = SupportTicket.objects.create(
            user=user,
            platform='wildberries',
            status='open'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        try:
            notify_admins_about_new_ticket(ticket)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ #{ticket.id}: {e}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        support_state[call.message.chat.id] = {
            'ticket_id': ticket.id,
            'platform': 'wildberries'
        }
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=SUPPORT_WILDBERRIES_START_TEXT,
            reply_markup=None
        )
        
        # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏, —É–≤–µ–¥–æ–º–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_support_wildberries: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def handle_support_message(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    try:
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if chat_id not in support_state:
            return False
        
        user = User.objects.get(telegram_id=chat_id)
        ticket_id = support_state[chat_id]['ticket_id']
        ticket = SupportTicket.objects.get(id=ticket_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ –ª–∏ —É–∂–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        if ticket.status == 'closed':
            bot.send_message(
                chat_id=chat_id,
                text="‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ."
            )
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del support_state[chat_id]
            return True
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        content_type = 'text'
        file_id = None
        caption = None
        message_text = None

        if getattr(message, 'photo', None):
            content_type = 'photo'
            file_id = message.photo[-1].file_id
            caption = message.caption
        elif getattr(message, 'video', None):
            content_type = 'video'
            file_id = message.video.file_id
            caption = message.caption
        elif getattr(message, 'document', None):
            content_type = 'document'
            file_id = message.document.file_id
            caption = message.caption
        elif getattr(message, 'text', None):
            content_type = 'text'
            message_text = message.text

        SupportMessage.objects.create(
            ticket=ticket,
            sender=user,
            sender_type='user',
            message_text=message_text or (caption or ''),
            telegram_message_id=str(message.message_id),
            content_type=content_type,
            file_id=file_id,
            caption=caption,
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–∞
        ticket.unread_by_admin = True
        ticket.last_message_at = timezone.now()
        ticket.last_message_from = 'user'
        ticket.messages_count = (ticket.messages_count or 0) + 1
        ticket.save(update_fields=['unread_by_admin','last_message_at','last_message_from','messages_count'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            bot.send_message(
                chat_id=chat_id,
                text=SUPPORT_MESSAGE_RECEIVED_TEXT
            )
        except Exception:
            pass
        
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞: —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω—É; –µ—Å–ª–∏ –º–µ–¥–∏–∞ ‚Äî —à–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        try:
            if ticket.assigned_admin:
                if content_type == 'text':
                    _forward_to_admins(ticket, message)
                else:
                    from bot.keyboards import get_ticket_files_markup
                    info = (
                        f"–ù–æ–≤–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏ #{ticket.id} –æ—Ç {ticket.user.user_name}.\n"
                        f"–¢–∏–ø: {content_type}. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é."
                    )
                    bot.send_message(ticket.assigned_admin.telegram_id, info, reply_markup=get_ticket_files_markup(ticket.id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–µ–¥–∏–∞ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket.id}: {e}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_support_message: {e}")
        return False


def close_support_ticket(call: CallbackQuery) -> None:
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ticket = SupportTicket.objects.filter(
            user=user,
            status__in=['open', 'in_progress']
        ).first()
        
        if not ticket:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ –ª–∏ —É–∂–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        if ticket.status == 'closed':
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ."
            )
            bot.answer_callback_query(call.id, "–û–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ")
            return
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        ticket.status = 'closed'
        ticket.closed_at = timezone.now()
        ticket.save()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if call.message.chat.id in support_state:
            del support_state[call.message.chat.id]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω
        if ticket.assigned_admin:
            admin_chat_id = ticket.assigned_admin.telegram_id
            if admin_chat_id in admin_response_state:
                del admin_response_state[admin_chat_id]
            
            bot.send_message(
                chat_id=admin_chat_id,
                text=f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_name} –∑–∞–∫—Ä—ã–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.id}."
            )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=SUPPORT_TICKET_CLOSED_TEXT,
            reply_markup=main_markup
        )
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ close_support_ticket: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def accept_support_ticket(call: CallbackQuery) -> None:
    """–ê–¥–º–∏–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ callback_data
        ticket_id = int(call.data.split('_')[-1])
        admin = User.objects.get(telegram_id=call.message.chat.id)
        
        with transaction.atomic():
            ticket = SupportTicket.objects.select_for_update().get(id=ticket_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ –ª–∏ —É–∂–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
            if ticket.assigned_admin:
                bot.edit_message_reply_markup(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=get_admin_ticket_markup(ticket_id, is_assigned=True)
                )
                bot.answer_callback_query(call.id, ADMIN_TICKET_ALREADY_ASSIGNED_TEXT)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ (–∫—Ä–æ–º–µ —Å—É–ø–µ—Ä/–æ–±—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤)
            if not admin_can_handle_ticket(admin, ticket):
                bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
                return

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∞
            ticket.assigned_admin = admin
            ticket.status = 'in_progress'
            ticket.unread_by_user = True
            ticket.unread_by_admin = False
            ticket.last_message_at = timezone.now()
            ticket.last_message_from = 'admin'
            ticket.save()
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = SupportMessage.objects.filter(ticket=ticket).order_by('created_at')
        message_history = ""
        for msg in messages:
            timestamp = msg.created_at.strftime('%H:%M %d.%m.%Y')
            message_history += f"[{timestamp}] {msg.sender.user_name}: {msg.message_text}\n\n"
        
        if not message_history:
            message_history = "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏
        has_files = SupportMessage.objects.filter(ticket=ticket).exclude(content_type='text').exists()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        admin_response_state[call.message.chat.id] = {
            'ticket_id': ticket_id
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        from bot.keyboards import get_admin_response_markup, get_ticket_files_markup
        if has_files:
            markup = get_ticket_files_markup(ticket_id)
        else:
            markup = get_admin_response_markup(ticket_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏ (—Å –∑–∞–º–µ–Ω–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}\n\n" + ADMIN_TICKET_ASSIGNED_TEXT.format(
                ticket_id=ticket_id,
                message_history=message_history
            ),
            reply_markup=markup
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ
        try:
            bot.send_message(
                chat_id=ticket.user.telegram_id,
                text=f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –ø—Ä–∏–Ω—è—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin.user_name}.\n\n"
                     f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.user.telegram_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤, —á—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ
        admins = get_relevant_admins_for_ticket(ticket).exclude(telegram_id=admin.telegram_id)
        for other_admin in admins:
            try:
                bot.send_message(
                    chat_id=other_admin.telegram_id,
                    text=f"‚ÑπÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –ø—Ä–∏–Ω—è—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin.user_name}."
                )
            except:
                pass
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ accept_support_ticket: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def handle_admin_response(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–æ–≤ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    try:
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞
        if chat_id not in admin_response_state:
            return False
        
        admin = User.objects.get(telegram_id=chat_id)
        ticket_id = admin_response_state[chat_id]['ticket_id']
        ticket = SupportTicket.objects.get(id=ticket_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ –ª–∏ —É–∂–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        if ticket.status == 'closed':
            bot.send_message(
                chat_id=chat_id,
                text="‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ."
            )
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            del admin_response_state[chat_id]
            return True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞
        SupportMessage.objects.create(
            ticket=ticket,
            sender=admin,
            sender_type='admin',
            message_text=message.text,
            telegram_message_id=str(message.message_id)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            chat_id=ticket.user.telegram_id,
            text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}",
            reply_markup=get_close_ticket_markup()
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω—É
        bot.send_message(
            chat_id=chat_id,
            text=ADMIN_RESPONSE_SENT_TEXT,
            reply_markup=get_admin_response_markup(ticket_id)
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç: –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –∞–¥–º–∏–Ω–æ–º, –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        ticket.unread_by_user = True
        ticket.unread_by_admin = False
        ticket.last_message_at = timezone.now()
        ticket.last_message_from = 'admin'
        ticket.messages_count = (ticket.messages_count or 0) + 1
        ticket.save(update_fields=['unread_by_user','unread_by_admin','last_message_at','last_message_from','messages_count'])
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_response: {e}")
        return False


def finish_ticket_processing(call: CallbackQuery) -> None:
    """–ê–¥–º–∏–Ω –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    try:
        ticket_id = int(call.data.split('_')[-1])
        admin = User.objects.get(telegram_id=call.message.chat.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
        ticket = SupportTicket.objects.get(id=ticket_id)
        
        # –ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        if ticket.status == 'closed':
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
            )
            bot.answer_callback_query(call.id, "–û–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ")
            return
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        ticket.status = 'closed'
        ticket.closed_at = timezone.now()
        ticket.save()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        if call.message.chat.id in admin_response_state:
            del admin_response_state[call.message.chat.id]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
        try:
            bot.send_message(
                chat_id=ticket.user.telegram_id,
                text=f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin.user_name}.\n\n"
                     f"–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.user.telegram_id}: {e}")
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=ADMIN_TICKET_FINISHED_TEXT
        )
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ finish_ticket_processing: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def view_ticket_details(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
    try:
        ticket_id = int(call.data.split('_')[-1])
        ticket = SupportTicket.objects.get(id=ticket_id)
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = SupportMessage.objects.filter(ticket=ticket).order_by('created_at')
        message_history = f"üìã –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}\n"
        message_history += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.user.user_name}\n"
        message_history += f"üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {ticket.get_platform_display()}\n"
        message_history += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {ticket.created_at.strftime('%H:%M %d.%m.%Y')}\n"
        message_history += f"üìä –°—Ç–∞—Ç—É—Å: {ticket.get_status_display()}\n\n"
        
        if ticket.assigned_admin:
            message_history += f"üë®‚Äçüíº –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω: {ticket.assigned_admin.user_name}\n\n"
        
        message_history += "üí¨ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
        
        for msg in messages:
            timestamp = msg.created_at.strftime('%H:%M %d.%m.%Y')
            sender_type = "üë§" if msg.sender_type == 'user' else "üë®‚Äçüíº"
            message_history += f"{sender_type} [{timestamp}] {msg.sender.user_name}:\n{msg.message_text}\n\n"
        
        if not messages:
            message_history += "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(message_history) > 4000:
            message_history = message_history[:3900] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –∞–¥–º–∏–Ω–æ–º
        ticket.unread_by_admin = False
        ticket.save(update_fields=['unread_by_admin'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω –Ω–∞ —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        admin = User.objects.get(telegram_id=call.message.chat.id)
        
        if ticket.assigned_admin and ticket.assigned_admin.telegram_id == admin.telegram_id:
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
            admin_response_state[call.message.chat.id] = {
                'ticket_id': ticket_id
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏
            has_files = SupportMessage.objects.filter(ticket=ticket).exclude(content_type='text').exists()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
            from bot.keyboards import get_admin_response_markup, get_admin_response_with_files_markup
            if has_files:
                markup = get_admin_response_with_files_markup(ticket_id)
            else:
                markup = get_admin_response_markup(ticket_id)
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=message_history + "\n\n‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ú–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                reply_markup=markup
            )
        else:
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è
            from bot.keyboards import get_admin_ticket_decision_markup
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=message_history,
                reply_markup=get_admin_ticket_decision_markup(ticket_id)
            )
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_ticket_details: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def admin_list_open_tickets(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—É –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        from bot.keyboards import get_admin_open_tickets_markup
        # –°–≤–æ–±–æ–¥–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –∞–¥–º–∏–Ω–∞–º –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ
        admin = User.objects.get(telegram_id=call.message.chat.id)
        base_qs = SupportTicket.objects.filter(status__in=["open", "in_progress"], assigned_admin__isnull=True)
        if is_super_admin(admin) or getattr(admin, 'is_admin', False):
            tickets = base_qs.order_by("-created_at")
        else:
            tickets = base_qs.filter(
                platform__in=(['ozon'] if getattr(admin, 'is_ozon_admin', False) else []) +
                              (['wildberries'] if getattr(admin, 'is_wb_admin', False) else [])
            ).order_by("-created_at")
        if not tickets.exists():
            from bot.keyboards import get_admin_open_tickets_markup
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.",
                reply_markup=get_admin_open_tickets_markup([])
            )
            bot.answer_callback_query(call.id)
            return

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üì¨ –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è (—Å–≤–æ–±–æ–¥–Ω—ã–µ):",
            reply_markup=get_admin_open_tickets_markup(list(tickets))
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_list_open_tickets: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def admin_list_in_progress_tickets(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—É –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å)"""
    try:
        from bot.keyboards import get_admin_in_progress_tickets_markup
        # –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: —Å—É–ø–µ—Ä/–æ–±—â–∏–µ –∞–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å–µ; –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        admin = User.objects.get(telegram_id=call.message.chat.id)
        base_qs = SupportTicket.objects.filter(status="in_progress")
        if is_super_admin(admin) or getattr(admin, 'is_admin', False):
            tickets = base_qs.order_by("-updated_at")
        else:
            tickets = base_qs.filter(
                platform__in=(['ozon'] if getattr(admin, 'is_ozon_admin', False) else []) +
                              (['wildberries'] if getattr(admin, 'is_wb_admin', False) else [])
            ).order_by("-updated_at")
        if not tickets.exists():
            from bot.keyboards import get_admin_in_progress_tickets_markup
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=get_admin_in_progress_tickets_markup([])
            )
            bot.answer_callback_query(call.id)
            return

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üü° –û–±—Ä–∞—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:",
            reply_markup=get_admin_in_progress_tickets_markup(list(tickets))
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_list_in_progress_tickets: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def takeover_support_ticket(call: CallbackQuery) -> None:
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º"""
    try:
        ticket_id = int(call.data.split('_')[-1])
        admin = User.objects.get(telegram_id=call.message.chat.id)
        with transaction.atomic():
            ticket = SupportTicket.objects.select_for_update().get(id=ticket_id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ (–∫—Ä–æ–º–µ —Å—É–ø–µ—Ä/–æ–±—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤)
            if not admin_can_handle_ticket(admin, ticket):
                bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
                return

            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
            ticket.assigned_admin = admin
            ticket.status = 'in_progress'
            ticket.unread_by_user = True
            ticket.unread_by_admin = False
            ticket.last_message_at = timezone.now()
            ticket.last_message_from = 'admin'
            ticket.save()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        admin_response_state[call.message.chat.id] = {
            'ticket_id': ticket_id
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = SupportMessage.objects.filter(ticket=ticket).order_by('created_at')
        message_history = ""
        for msg in messages:
            timestamp = msg.created_at.strftime('%H:%M %d.%m.%Y')
            message_history += f"[{timestamp}] {msg.sender.user_name}: {msg.message_text}\n\n"
        
        if not message_history:
            message_history = "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏
        has_files = SupportMessage.objects.filter(ticket=ticket).exclude(content_type='text').exists()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        from bot.keyboards import get_admin_response_markup, get_admin_response_with_files_markup
        if has_files:
            markup = get_admin_response_with_files_markup(ticket_id)
        else:
            markup = get_admin_response_markup(ticket_id)
        
        # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –í—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}\n\n" + ADMIN_TICKET_ASSIGNED_TEXT.format(
                ticket_id=ticket_id,
                message_history=message_history
            ),
            reply_markup=markup
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            bot.send_message(
                chat_id=ticket.user.telegram_id,
                text=f"‚ÑπÔ∏è –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin.user_name}."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–µ #{ticket_id}: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –±—ã–ª
        try:
            previous_admins = get_relevant_admins_for_ticket(ticket).exclude(telegram_id=admin.telegram_id)
            for other_admin in previous_admins:
                try:
                    bot.send_message(other_admin.telegram_id, f"‚ôªÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –±—ã–ª–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin.user_name}.")
                except Exception:
                    pass
        except Exception:
            pass

        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ takeover_support_ticket: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def send_ticket_files_to_admin(call: CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É –≤—Å–µ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Ç–∏–∫–µ—Ç–∞ –ø–æ file_id"""
    try:
        ticket_id = int(call.data.split('_')[-1])
        admin = User.objects.get(telegram_id=call.message.chat.id)
        ticket = SupportTicket.objects.get(id=ticket_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        if not admin.is_admin:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        media_messages = SupportMessage.objects.filter(ticket=ticket).exclude(content_type='text').order_by('created_at')
        if not media_messages.exists():
            bot.answer_callback_query(call.id, "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        sent = 0
        for msg in media_messages:
            try:
                caption = msg.caption or f"–§–∞–π–ª –∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è #{ticket.id}"
                if msg.content_type == 'photo' and msg.file_id:
                    bot.send_photo(admin.telegram_id, msg.file_id, caption=caption)
                elif msg.content_type == 'video' and msg.file_id:
                    bot.send_video(admin.telegram_id, msg.file_id, caption=caption)
                elif msg.content_type == 'document' and msg.file_id:
                    bot.send_document(admin.telegram_id, msg.file_id, caption=caption)
                else:
                    # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
                    bot.send_message(admin.telegram_id, f"–í–ª–æ–∂–µ–Ω–∏–µ ({msg.content_type}) –±–µ–∑ file_id")
                sent += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω—É {admin.telegram_id}: {e}")
                continue

        bot.answer_callback_query(call.id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sent}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_ticket_files_to_admin: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def admin_list_my_tickets(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞"""
    try:
        admin = User.objects.get(telegram_id=call.message.chat.id)
        tickets = SupportTicket.objects.filter(assigned_admin=admin, status__in=["open","in_progress"]).order_by('-last_message_at','-created_at')
        from bot.keyboards import get_admin_my_tickets_markup
        if not tickets.exists():
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.",
                reply_markup=get_admin_my_tickets_markup([])
            )
            bot.answer_callback_query(call.id)
            return
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:",
            reply_markup=get_admin_my_tickets_markup(list(tickets))
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_list_my_tickets: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def decline_support_ticket(call: CallbackQuery) -> None:
    """–ê–¥–º–∏–Ω –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è (–Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º –≤ —Ç–∏–∫–µ—Ç–µ)"""
    try:
        ticket_id = int(call.data.split('_')[-1])
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ö–∞–± –æ–±—Ä–∞—â–µ–Ω–∏–π
        from bot.keyboards import get_admin_tickets_hub_markup
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –æ–±—Ä–∞—â–µ–Ω–∏–π:",
            reply_markup=get_admin_tickets_hub_markup()
        )

        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        if call.message.chat.id in admin_response_state:
            del admin_response_state[call.message.chat.id]

        bot.answer_callback_query(call.id, text=f"‚ùå –û—Ç–∫–∞–∑ –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è #{ticket_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ decline_support_ticket: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def notify_admins_about_new_ticket(ticket: SupportTicket) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤"""
    try:
        admins = get_relevant_admins_for_ticket(ticket)
        for admin in admins:
            try:
                bot.send_message(
                    chat_id=admin.telegram_id,
                    text=ADMIN_NEW_TICKET_TEXT.format(
                        user_name=ticket.user.user_name,
                        platform=ticket.get_platform_display(),
                        created_at=ticket.created_at.strftime('%H:%M %d.%m.%Y')
                    ),
                    reply_markup=get_admin_ticket_markup(ticket.id)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin.telegram_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ notify_admins_about_new_ticket: {e}")


def already_assigned_callback(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '—É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ'"""
    bot.answer_callback_query(call.id, ADMIN_TICKET_ALREADY_ASSIGNED_TEXT)


def admin_back_to_tickets(call: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–∞ –≤ —Ö–∞–± –æ–±—Ä–∞—â–µ–Ω–∏–π (—Å–≤–æ–±–æ–¥–Ω—ã–µ / –º–æ–∏ / –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ)"""
    try:
        from bot.keyboards import get_admin_tickets_hub_markup
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –æ–±—Ä–∞—â–µ–Ω–∏–π:",
            reply_markup=get_admin_tickets_hub_markup()
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ (–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ)
        if call.message.chat.id in admin_response_state:
            del admin_response_state[call.message.chat.id]
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_back_to_tickets: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def _forward_to_admins(ticket: SupportTicket, message: Message) -> None:
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞–º —Å –Ω—É–∂–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    admins = []
    if ticket.assigned_admin:
        admins = [ticket.assigned_admin]
    else:
        admins = list(get_relevant_admins_for_ticket(ticket))

    for admin in admins:
        try:
            header = f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é #{ticket.id} –æ—Ç {ticket.user.user_name}"
            if getattr(message, 'text', None):
                bot.send_message(admin.telegram_id, f"{header}\n\n{message.text}", reply_markup=get_admin_ticket_markup(ticket.id))
            else:
                # –î–ª—è –º–µ–¥–∏–∞ –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é ‚Äî –ø—É—Å—Ç—å –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã"
                from bot.keyboards import get_ticket_files_markup
                bot.send_message(admin.telegram_id, f"{header}\n\n–ü–æ–ª—É—á–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã.", reply_markup=get_ticket_files_markup(ticket.id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin.telegram_id}: {e}")


def _notify_admins_user_continues(ticket: SupportTicket) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –¢–û–õ–¨–ö–û –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω ‚Äî –Ω–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∏–∫–æ–≥–æ (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Å–ø–∞–º–∞)."""
    if not ticket.assigned_admin:
        return
    text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ticket.user.user_name} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é #{ticket.id}"
    try:
        from bot.keyboards import get_ticket_files_markup
        bot.send_message(ticket.assigned_admin.telegram_id, text, reply_markup=get_admin_ticket_markup(ticket.id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω—É {ticket.assigned_admin.telegram_id}: {e}")
