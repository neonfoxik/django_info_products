from telebot.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from bot import bot
from bot.texts import MAIN_TEXT, SUPPORT_TEXT, SUPPORT_LIMIT_REACHED, AI_ERROR
from bot.keyboards import main_markup, back_to_main_markup
from .registration import start_registration
from bot.models import goods, goods_category, User

def start(message: Message) -> None:
    # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ò–ò –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
    try:
        user = User.objects.get(telegram_id=message.chat.id)
        user.is_ai = False
        user.chat_history = {}
        user.save()
    except User.DoesNotExist:
        pass
    start_registration(message)

def menu_call(call: CallbackQuery) -> None:
    # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ò–ò –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        user.is_ai = False
        user.chat_history = {}
        user.save()
    except User.DoesNotExist:
        pass
    show_categories(call.message.chat.id, call.message.message_id)

def menu_m(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ"""
    user = User.objects.filter(telegram_id=message.chat.id).first()
    if user:
        # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ò–ò
        user.is_ai = False
        user.chat_history = {}
        user.save()
    
    bot.send_message(
        chat_id=message.chat.id,
        text=MAIN_TEXT,
        reply_markup=main_markup
    )

def show_categories(chat_id: int, message_id: int = None) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    markup = InlineKeyboardMarkup()
    categories = goods_category.objects.all()
    
    for category in categories:
        btn = InlineKeyboardButton(
            category.name, 
            callback_data=f"category_{category.id}"
        )
        markup.add(btn)
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
    
    if message_id:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=markup
        )
    else:
        bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=markup
        )

def show_category_products(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(call.data.split('_')[1])
    category = goods_category.objects.get(id=category_id)
    products = goods.objects.filter(parent_category=category)
    
    markup = InlineKeyboardMarkup()
    for product in products:
        btn = InlineKeyboardButton(
            product.name,
            callback_data=f"product_{product.id}"
        )
        markup.add(btn)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    back_btn = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")
    markup.add(back_btn)
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.name}:",
        reply_markup=markup
    )

def show_product_menu(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(call.data.split('_')[1])
    product = goods.objects.get(id=product_id)
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=f"instructions_{product_id}"))
    markup.add(InlineKeyboardButton("‚ùì FAQ", callback_data=f"faq_{product_id}"))
    markup.add(InlineKeyboardButton("üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è", callback_data=f"warranty_{product_id}"))
    markup.add(InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data=f"support_{product_id}"))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category_{product.parent_category.id}"))
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ: {product.name}",
        reply_markup=markup
    )

def send_long_message(chat_id: int, text: str, message_id: int = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    MAX_LENGTH = 4096
    
    if len(text) <= MAX_LENGTH:
        if message_id:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text
            )
        else:
            bot.send_message(chat_id=chat_id, text=text)
    else:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        parts = [text[i:i + MAX_LENGTH] for i in range(0, len(text), MAX_LENGTH)]
        for i, part in enumerate(parts):
            if i == 0 and message_id:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=part
                )
            else:
                bot.send_message(chat_id=chat_id, text=part)

def show_product_info(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è/FAQ/–≥–∞—Ä–∞–Ω—Ç–∏—è)"""
    info_type, product_id = call.data.split('_')
    product_id = int(product_id)
    product = goods.objects.get(id=product_id)
    
    markup = InlineKeyboardMarkup()
    back_btn = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"product_{product_id}")
    markup.add(back_btn)
    
    if info_type == "instructions":
        text = f"üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é {product.name}:\n\n{product.instructions}"
    elif info_type == "faq":
        text = f"‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ {product.name}:\n\n{product.FAQ}"
    elif info_type == "warranty":
        text = f"üõ°Ô∏è –£—Å–ª–æ–≤–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ {product.name}:\n\n{product.warranty}"
    elif info_type == "support":
        text = SUPPORT_TEXT
        user = User.objects.get(telegram_id=call.message.chat.id)
        user.is_ai = True
        user.chat_history = {}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        user.save()
    else:
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–π –¥–ª–∏–Ω—ã
    send_long_message(call.message.chat.id, text, call.message.message_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª —Ä–∞–∑–±–∏—Ç
    if len(text) > 4096:
        bot.send_message(
            chat_id=call.message.chat.id,
            text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=markup
        )
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )

def chat_with_ai(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò"""
    from bot.apis.ai import OpenAIAPI
    
    try:
        user = User.objects.get(telegram_id=message.chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò
        if not user.is_ai:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_history = user.chat_history or {}
        if not isinstance(chat_history, dict):
            chat_history = {}
            
        ai_counter = chat_history.get('ai_counter', 0)
        
        # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 3 —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–∫–ª—é—á–∞–µ–º –ò–ò –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if ai_counter >= 3:
            user.is_ai = False
            user.chat_history = {}
            user.save()
            
            markup = InlineKeyboardMarkup()
            back_btn = InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
            markup.add(back_btn)
            
            bot.send_message(
                chat_id=message.chat.id,
                text=SUPPORT_LIMIT_REACHED,
                reply_markup=markup
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai = OpenAIAPI()
        response = ai.get_response(message.chat.id, message.text)
        
        if response and 'message' in response:
            bot.send_message(message.chat.id, response['message'])
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            chat_history['ai_counter'] = ai_counter + 1
            user.chat_history = chat_history
            user.save()
        else:
            bot.send_message(
                message.chat.id, 
                AI_ERROR
            )
    except User.DoesNotExist:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        pass
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(
            message.chat.id, 
            AI_ERROR
        )
        print(f"–û—à–∏–±–∫–∞ –≤ chat_with_ai: {e}")

def back_to_main(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        user.is_ai = False
        user.chat_history = {}
        user.save()
    except User.DoesNotExist:
        pass
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=MAIN_TEXT,
        reply_markup=main_markup
    )

def support_menu(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ò–ò –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User.objects.get(telegram_id=call.message.chat.id)
    user.is_ai = True
    user.chat_history = {}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    user.save()
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=SUPPORT_TEXT,
        reply_markup=back_to_main_markup
    )
