from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from django.conf import settings
from django.utils import timezone
from bot import bot, logger
from bot.models import User, PromoCode, PromoCodeCategory
from bot.keyboards import (
    get_promocode_menu_markup,
    get_promocode_list_markup,
    get_promocode_detail_markup,
    get_categories_markup,
    get_promocode_categories_admin_markup,
    get_promocode_category_actions_markup,
    back_to_main_markup,
)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
promocode_state = {}


def promocode_menu(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    try:
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner_db = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        is_owner_env = str(getattr(settings, 'OWNER_ID', '')).strip() == str(call.message.chat.id)
        is_owner = is_owner_db or is_owner_env
        
        if not user.is_admin and not is_owner:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_promocode_menu_markup()
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_menu: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def promocode_add(call: CallbackQuery) -> None:
    """–ü—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∑–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    try:
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É –∏–ª–∏ OWNER_ID
        if not is_owner and not user.is_super_admin:
            bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã")
            return
        categories = PromoCodeCategory.objects.filter(is_active=True).order_by('name')
        if not categories.exists():
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –≤ –∞–¥–º–∏–Ω–∫–µ Django.",
                reply_markup=get_promocode_menu_markup()
            )
            bot.answer_callback_query(call.id)
            return
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:",
            reply_markup=get_promocode_categories_admin_markup(categories, back_callback="promocode_menu")
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_add: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def handle_promocode_text(message: Message) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    try:
        if message.chat.id not in promocode_state:
            return False
        
        state = promocode_state[message.chat.id]
        if not state.get("awaiting_promocodes"):
            return False
        
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=message.chat.id)
        is_owner_db = OwnerSettings.objects.filter(
            owner_telegram_id=message.chat.id,
            is_active=True
        ).exists()
        is_owner_env = str(getattr(settings, 'OWNER_ID', '')).strip() == str(message.chat.id)
        is_owner = is_owner_db or is_owner_env
        
        if not is_owner and not user.is_super_admin:
            bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã"
            )
            if message.chat.id in promocode_state:
                del promocode_state[message.chat.id]
            return True
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        promocodes_text = message.text.strip()
        promocodes_lines = [line.strip().upper() for line in promocodes_text.split('\n') if line.strip()]
        
        if not promocodes_lines:
            bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return True
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
        created_count = 0
        skipped_count = 0
        
        for code in promocodes_lines:
            if len(code) > 50:
                skipped_count += 1
                continue
                
            try:
                promo, created = PromoCode.objects.get_or_create(
                    code=code,
                    defaults={
                        'created_by': user,
                        'is_active': True,
                        'is_used': False,
                        'category': state.get('category')
                    }
                )
                
                if created:
                    created_count += 1
                else:
                    skipped_count += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ {code}: {e}")
                skipped_count += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:\n"
        result_text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {created_count}\n"
        if skipped_count > 0:
            result_text += f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞): {skipped_count}\n"
        
        result_text += "\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ Django."
        
        bot.send_message(
            chat_id=message.chat.id,
            text=result_text,
            reply_markup=get_promocode_menu_markup()
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del promocode_state[message.chat.id]
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_promocode_text: {e}")
        if message.chat.id in promocode_state:
            del promocode_state[message.chat.id]
        bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."
        )
        return True


def handle_promocode_document(message: Message) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ)"""
    try:
        if message.chat.id not in promocode_state:
            return False
        state = promocode_state[message.chat.id]
        if not state.get("awaiting_promocodes"):
            return False

        from bot.models import OwnerSettings
        user = User.objects.get(telegram_id=message.chat.id)
        is_owner_db = OwnerSettings.objects.filter(
            owner_telegram_id=message.chat.id,
            is_active=True
        ).exists()
        is_owner_env = str(getattr(settings, 'OWNER_ID', '')).strip() == str(message.chat.id)
        is_owner = is_owner_db or is_owner_env
        if not is_owner and not user.is_super_admin:
            bot.send_message(chat_id=message.chat.id, text="‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã —Ñ–∞–π–ª–∞–º–∏")
            del promocode_state[message.chat.id]
            return True

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        if not getattr(message, 'document', None):
            return False
        file_id = message.document.file_id
        try:
            file_info = bot.get_file(file_id)
            file_bytes = bot.download_file(file_info.file_path)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
            bot.send_message(chat_id=message.chat.id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return True

        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç
        content = None
        for enc in ("utf-8", "utf-16", "cp1251", "iso-8859-1"):
            try:
                content = file_bytes.decode(enc)
                break
            except Exception:
                continue
        if content is None:
            bot.send_message(chat_id=message.chat.id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞.")
            return True

        lines = [line.strip().upper() for line in content.splitlines() if line.strip()]
        if not lines:
            bot.send_message(chat_id=message.chat.id, text="‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
            return True

        created_count = 0
        skipped_count = 0
        for code in lines:
            if len(code) > 50:
                skipped_count += 1
                continue
            try:
                promo, created = PromoCode.objects.get_or_create(
                    code=code,
                    defaults={
                        'created_by': user,
                        'is_active': True,
                        'is_used': False,
                        'category': state.get('category')
                    }
                )
                if created:
                    created_count += 1
                else:
                    skipped_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ {code}: {e}")
                skipped_count += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        promocode_state[message.chat.id]["awaiting_promocodes"] = False
        promocode_state[message.chat.id]["awaiting_instruction"] = True
        promocode_state[message.chat.id]["created_count"] = created_count
        promocode_state[message.chat.id]["skipped_count"] = skipped_count

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        result_text = f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω:\n"
        result_text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {created_count}\n"
        if skipped_count:
            result_text += f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}\n"
        result_text += "\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ Django."
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del promocode_state[message.chat.id]
        
        bot.send_message(chat_id=message.chat.id, text=result_text, reply_markup=get_promocode_menu_markup())
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_promocode_document: {e}")
        if message.chat.id in promocode_state:
            del promocode_state[message.chat.id]
        bot.send_message(chat_id=message.chat.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
        return True


def promocode_list(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    try:
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner_db = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        is_owner_env = str(getattr(settings, 'OWNER_ID', '')).strip() == str(call.message.chat.id)
        is_owner = is_owner_db or is_owner_env
        
        if not user.is_admin and not is_owner:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        promocodes = PromoCode.objects.select_related('category').all()[:10]
        
        if not promocodes:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—É—Å—Ç.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã'.",
                reply_markup=get_promocode_menu_markup()
            )
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
                reply_markup=get_promocode_list_markup(promocodes)
            )
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_list: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def promocode_detail(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    try:
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner_db = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        is_owner_env = str(getattr(settings, 'OWNER_ID', '')).strip() == str(call.message.chat.id)
        is_owner = is_owner_db or is_owner_env
        
        if not user.is_admin and not is_owner:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        promo_id = int(call.data.split('_')[-1])
        promo = PromoCode.objects.get(id=promo_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏
        detail_text = f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: {promo.code}\n\n"
        detail_text += f"üìä –°—Ç–∞—Ç—É—Å: "
        if promo.is_used:
            detail_text += "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ‚ùå"
        elif promo.is_active:
            detail_text += "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ"
        else:
            detail_text += "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚è∏Ô∏è"
        
        detail_text += f"\nüìÖ –°–æ–∑–¥–µ–Ω: {promo.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        if promo.category:
            detail_text += f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {promo.category.name}\n"
        
        if promo.created_by:
            detail_text += f"üë§ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {promo.created_by.user_name}\n"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=detail_text,
            reply_markup=get_promocode_detail_markup(promo_id)
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_detail: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def promocode_toggle(call: CallbackQuery) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    try:
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        
        if not user.is_admin and not is_owner:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        promo_id = int(call.data.split('_')[-1])
        promo = PromoCode.objects.get(id=promo_id)
        
        promo.is_active = not promo.is_active
        promo.save()
        
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if promo.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo.code} {status_text}.",
            reply_markup=get_promocode_detail_markup(promo_id)
        )
        bot.answer_callback_query(call.id, f"–ü—Ä–æ–º–æ–∫–æ–¥ {status_text}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_toggle: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def promocode_delete(call: CallbackQuery) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"""
    try:
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        
        if not user.is_admin and not is_owner:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        promo_id = int(call.data.split('_')[-1])
        promo = PromoCode.objects.get(id=promo_id)
        promo_code = promo.code
        
        promo.delete()
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üóëÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_promocode_menu_markup()
        )
        bot.answer_callback_query(call.id, "–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_delete: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def get_user_promocode(call: CallbackQuery) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∑–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤)
        all_categories = PromoCodeCategory.objects.filter(
            is_active=True
        ).order_by('name')
        
        if not all_categories.exists():
            bot.send_message(
                chat_id=call.message.chat.id,
                text="üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.",
                parse_mode='Markdown'
            )
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return
        
        bot.send_message(
            chat_id=call.message.chat.id,
            text="üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–¥–∞—Ä–∫–∞:",
            reply_markup=get_categories_markup(all_categories, prefix="get_promocode_cat", back_callback="back_to_main")
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_user_promocode: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def promocode_select_category(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º"""
    try:
        from bot.models import OwnerSettings
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        if not is_owner and not user.is_super_admin:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        cat_id = int(call.data.split('_')[-1])
        category = PromoCodeCategory.objects.get(id=cat_id, is_active=True)
        promocode_state[call.message.chat.id] = {"awaiting_promocodes": True, "category": category}
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
                "‚Ä¢ –û–¥–∏–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å—Ç—Ä–æ–∫–µ\n"
                "‚Ä¢ –ò–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "ZZ321D\n"
                "QEWCZ21\n"
                "ZXZCSED32"
            ),
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"promocode_back_to_category_{category.id}")
            )
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_select_category: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def promocode_select_category_file(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Ñ–∞–π–ª–æ–º"""
    try:
        from bot.models import OwnerSettings
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner_db = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        is_owner_env = str(getattr(settings, 'OWNER_ID', '')).strip() == str(call.message.chat.id)
        is_owner = is_owner_db or is_owner_env
        if not is_owner and not user.is_super_admin:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        cat_id = int(call.data.split('_')[-1])
        category = PromoCodeCategory.objects.get(id=cat_id, is_active=True)
        promocode_state[call.message.chat.id] = {"awaiting_promocodes": True, "category": category}
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Ñ–∞–π–ª–æ–º\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n\n"
                "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ .txt —Ñ–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ."
            ),
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"promocode_back_to_category_{category.id}")
            )
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_select_category_file: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def promocode_choose_actions(call: CallbackQuery) -> None:
    """–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞–∑–∞—Ç—å –¥–≤–µ –∫–Ω–æ–ø–∫–∏: —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–º"""
    try:
        from bot.models import OwnerSettings
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner_db = OwnerSettings.objects.filter(owner_telegram_id=call.message.chat.id, is_active=True).exists()
        is_owner_env = str(getattr(settings, 'OWNER_ID', '')).strip() == str(call.message.chat.id)
        is_owner = is_owner_db or is_owner_env
        if not is_owner and not user.is_super_admin:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        cat_id = int(call.data.split('_')[-1])
        category = PromoCodeCategory.objects.get(id=cat_id, is_active=True)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:",
            reply_markup=get_promocode_category_actions_markup(category.id, back_callback="promocode_add")
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_choose_actions: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def promocode_back_to_category(call: CallbackQuery) -> None:
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–µ–∫—Å—Ç/—Ñ–∞–π–ª) –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞"
    """
    try:
        from bot.models import OwnerSettings
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner_db = OwnerSettings.objects.filter(owner_telegram_id=call.message.chat.id, is_active=True).exists()
        is_owner_env = str(getattr(settings, 'OWNER_ID', '')).strip() == str(call.message.chat.id)
        is_owner = is_owner_db or is_owner_env
        if not is_owner and not user.is_super_admin:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        cat_id = int(call.data.split('_')[-1])
        category = PromoCodeCategory.objects.get(id=cat_id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:",
            reply_markup=get_promocode_category_actions_markup(category.id, back_callback="promocode_add")
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_back_to_category: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def user_select_category(call: CallbackQuery) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'"""
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        cat_id = int(call.data.split('_')[-1])
        category = PromoCodeCategory.objects.get(id=cat_id, is_active=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if not user.received_promocodes_by_category:
            user.received_promocodes_by_category = {}
        
        if str(cat_id) in user.received_promocodes_by_category:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π) –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–µ
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ + –∫–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –Ω–∞–∑–∞–¥
            received_promo = user.received_promocodes_by_category[str(cat_id)]
            
            text = f"üéÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n\n"
            text += f"üé´ **–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: `{received_promo}`**\n\n"
            text += "üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
            has_instruction_file = bool(category.instruction_file)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            from bot.keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            markup = InlineKeyboardMarkup()
            
            # –ö–Ω–æ–ø–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª)
            if has_instruction_file:
                markup.add(InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=f"get_instruction_{cat_id}"))
            
            markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
            bot.send_message(
                chat_id=call.message.chat.id,
                text=text,
                parse_mode='Markdown',
                reply_markup=markup
            )
            
            bot.answer_callback_query(call.id, "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –ø–æ–ª—É—á–µ–Ω")
            return
        
        available_promo = PromoCode.objects.filter(
            is_active=True,
            is_used=False,
            category=category
        ).first()
        if not available_promo:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π) –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(
                chat_id=call.message.chat.id,
                text=f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}' –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
                reply_markup=back_to_main_markup
            )
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫
        has_instruction_file = bool(category.instruction_file)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
        text = f"üéÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n\n"
        text += f"üåü –î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥!\n\n"
        
        if has_instruction_file:
            text += "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
            text += "\n‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
            text += "\n‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"
        else:
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        from bot.keyboards import InlineKeyboardMarkup, InlineKeyboardButton
        markup = InlineKeyboardMarkup()
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
        markup.add(InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"claim_promocode_{cat_id}"))
        
        # –ö–Ω–æ–ø–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª)
        if has_instruction_file:
            markup.add(InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=f"get_instruction_{cat_id}"))
        
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π) –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–µ
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_select_category: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def notify_admin_promocodes_shortage(category):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É –æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö"""
    try:
        from bot.models import OwnerSettings
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ (OwnerSettings)
        owner_settings = OwnerSettings.objects.filter(is_active=True).first()
        admin_user = User.objects.filter(is_super_admin=True).first()
        
        owner_id = None
        if owner_settings:
            owner_id = owner_settings.owner_telegram_id
        elif admin_user:
            owner_id = admin_user.telegram_id
        
        if not owner_id:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        notification_text = f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö**\n\n"
        notification_text += f"üì¶ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category.name}\n"
        notification_text += f"üìä **–°—Ç–∞—Ç—É—Å:** –ü—Ä–æ–º–æ–∫–æ–¥—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n\n"
        notification_text += "üîß **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        notification_text += "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Telegram\n"
        notification_text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ Django\n"
        notification_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n"
        notification_text += "üìù –í—Ä–µ–º—è: " + timezone.now().strftime("%d.%m.%Y %H:%M")
        
        bot.send_message(
            chat_id=owner_id,
            text=notification_text,
            parse_mode='Markdown'
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É –æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")


def claim_promocode(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    try:
        logger.info(f"[DEBUG] claim_promocode –≤—ã–∑–≤–∞–Ω–∞ —Å {call.data}")
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        cat_id = int(call.data.split('_')[-1])
        category = PromoCodeCategory.objects.get(id=cat_id, is_active=True)
        
        logger.info(f"[DEBUG] –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category.name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        available_promo = PromoCode.objects.filter(
            is_active=True,
            is_used=False,
            category=category
        ).first()
        
        if not available_promo:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
            remaining_promos = PromoCode.objects.filter(
                is_active=True,
                is_used=False,
                category=category
            ).count()
            
            if remaining_promos == 0:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
                notify_admin_promocodes_shortage(category)
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}' –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–∂–µ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                reply_markup=back_to_main_markup
            )
            bot.answer_callback_query(call.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        promo_code = available_promo.code
        instruction = category.instruction
        
        # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        available_promo.is_used = True
        available_promo.save()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        remaining_count = PromoCode.objects.filter(
            is_active=True,
            is_used=False,
            category=category
        ).count()
        
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        if remaining_count == 1:
            notify_admin_promocodes_shortage(category)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if not user.received_promocodes_by_category:
            user.received_promocodes_by_category = {}
        user.received_promocodes_by_category[str(cat_id)] = promo_code
        user.save()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        received_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}'!\n\n"
        received_text += f"üé´ **–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: `{promo_code}`**\n\n"
        
        if instruction:
            received_text += f"üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é:**\n{instruction}\n\n"
        else:
            received_text += "üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if len(user.received_promocodes_by_category) > 1:
            received_text += "üéÅ **–í–∞—à–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:**\n"
            for cat_id_str, promocode in user.received_promocodes_by_category.items():
                try:
                    cat = PromoCodeCategory.objects.get(id=int(cat_id_str))
                    star = "‚≠êÔ∏è" if str(cat_id) == str(cat_id_str) else "‚Ä¢"
                    received_text += f"{star} **{cat.name}**: `{promocode}`\n"
                except:
                    star = "‚≠êÔ∏è" if str(cat_id) == str(cat_id_str) else "‚Ä¢"
                    received_text += f"{star} –ü—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n"
        
        received_text += "\nüí° **–ü–æ–º–Ω–∏—Ç–µ:** –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–æ–º–æ–∫–æ–¥—É –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=received_text,
            parse_mode='Markdown',
            reply_markup=back_to_main_markup
        )
        bot.answer_callback_query(call.id, "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ claim_promocode: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def get_category_instruction(call: CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç"""
    try:
        logger.info(f"[DEBUG] get_category_instruction –≤—ã–∑–≤–∞–Ω–∞ —Å {call.data}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        cat_id = int(call.data.split('_')[-1])
        category = PromoCodeCategory.objects.get(id=cat_id, is_active=True)
        
        logger.info(f"[DEBUG] –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: {category.name}")
        
        has_file = bool(category.instruction_file)
        
        logger.info(f"[DEBUG] has_file: {has_file}")
        
        instruction_sent = False
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if has_file:
            try:
                logger.info(f"[DEBUG] –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {category.instruction_file.path}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ–¥ –Ω–∏–º
                with open(category.instruction_file.path, 'rb') as file:
                    message_with_document = bot.send_document(
                        chat_id=call.message.chat.id,
                        document=file,
                        caption=f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}'"
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                from bot.keyboards import InlineKeyboardMarkup, InlineKeyboardButton
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                
                bot.edit_message_reply_markup(
                    chat_id=call.message.chat.id,
                    message_id=message_with_document.message_id,
                    reply_markup=markup
                )
                
                
                instruction_sent = True
                bot.answer_callback_query(call.id, "üìã –§–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                logger.info(f"[DEBUG] –§–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                from bot.keyboards import InlineKeyboardMarkup, InlineKeyboardButton
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                
                bot.send_message(
                    chat_id=call.message.chat.id,
                    text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                    reply_markup=markup
                )
                bot.answer_callback_query(call.id, "‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                instruction_sent = True
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if not instruction_sent:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            from bot.keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            bot.send_message(
                chat_id=call.message.chat.id,
                text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=markup
            )
            bot.answer_callback_query(call.id, "‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –≤ get_category_instruction: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
