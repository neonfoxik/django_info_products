from telebot.types import Message, CallbackQuery
from django.utils import timezone
from bot import bot, logger
from bot.models import User, PromoCode
from bot.keyboards import get_promocode_menu_markup, get_promocode_list_markup, get_promocode_detail_markup


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
promocode_state = {}


def promocode_menu(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    try:
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        
        if not user.is_admin and not is_owner:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_promocode_menu_markup()
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_menu: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def promocode_add(call: CallbackQuery) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    try:
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        
        if not is_owner:
            bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã")
            return
        
        promocode_state[call.message.chat.id] = {"awaiting_promocodes": True}
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
                 "‚Ä¢ –û–¥–∏–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å—Ç—Ä–æ–∫–µ\n"
                 "‚Ä¢ –ò–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n\n"
                 "–ü—Ä–∏–º–µ—Ä:\n"
                 "ZZ321D\n"
                 "QEWCZ21\n"
                 "ZXZCSED32"
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_add: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def handle_promocode_text(message: Message) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    try:
        if message.chat.id not in promocode_state:
            return False
        
        state = promocode_state[message.chat.id]
        if not state.get("awaiting_promocodes"):
            return False
        
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=message.chat.id)
        is_owner = OwnerSettings.objects.filter(
            owner_telegram_id=message.chat.id,
            is_active=True
        ).exists()
        
        if not is_owner:
            bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã"
            )
            if message.chat.id in promocode_state:
                del promocode_state[message.chat.id]
            return True
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        promocodes_text = message.text.strip()
        promocodes_lines = [line.strip().upper() for line in promocodes_text.split('\n') if line.strip()]
        
        if not promocodes_lines:
            bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return True
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
        created_count = 0
        skipped_count = 0
        
        for code in promocodes_lines:
            if len(code) > 50:
                skipped_count += 1
                continue
                
            try:
                promo, created = PromoCode.objects.get_or_create(
                    code=code,
                    defaults={
                        'created_by': user,
                        'is_active': True,
                        'is_used': False
                    }
                )
                
                if created:
                    created_count += 1
                else:
                    skipped_count += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ {code}: {e}")
                skipped_count += 1
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del promocode_state[message.chat.id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:\n"
        result_text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {created_count}\n"
        if skipped_count > 0:
            result_text += f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞): {skipped_count}\n"
        
        bot.send_message(
            chat_id=message.chat.id,
            text=result_text,
            reply_markup=get_promocode_menu_markup()
        )
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_promocode_text: {e}")
        if message.chat.id in promocode_state:
            del promocode_state[message.chat.id]
        bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."
        )
        return True


def promocode_list(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    try:
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        
        if not user.is_admin and not is_owner:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        promocodes = PromoCode.objects.all()[:10]
        
        if not promocodes:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—É—Å—Ç.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã'.",
                reply_markup=get_promocode_menu_markup()
            )
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
                reply_markup=get_promocode_list_markup(promocodes)
            )
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_list: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def promocode_detail(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    try:
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        
        if not user.is_admin and not is_owner:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        promo_id = int(call.data.split('_')[-1])
        promo = PromoCode.objects.get(id=promo_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏
        detail_text = f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: {promo.code}\n\n"
        detail_text += f"üìä –°—Ç–∞—Ç—É—Å: "
        if promo.is_used:
            detail_text += "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ‚ùå"
        elif promo.is_active:
            detail_text += "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ"
        else:
            detail_text += "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚è∏Ô∏è"
        
        detail_text += f"\nüìÖ –°–æ–∑–¥–∞–Ω: {promo.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        if promo.created_by:
            detail_text += f"üë§ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {promo.created_by.user_name}\n"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=detail_text,
            reply_markup=get_promocode_detail_markup(promo_id)
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_detail: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def promocode_toggle(call: CallbackQuery) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    try:
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        
        if not user.is_admin and not is_owner:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        promo_id = int(call.data.split('_')[-1])
        promo = PromoCode.objects.get(id=promo_id)
        
        promo.is_active = not promo.is_active
        promo.save()
        
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if promo.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo.code} {status_text}.",
            reply_markup=get_promocode_detail_markup(promo_id)
        )
        bot.answer_callback_query(call.id, f"–ü—Ä–æ–º–æ–∫–æ–¥ {status_text}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_toggle: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def promocode_delete(call: CallbackQuery) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"""
    try:
        from bot.models import OwnerSettings
        
        user = User.objects.get(telegram_id=call.message.chat.id)
        is_owner = OwnerSettings.objects.filter(
            owner_telegram_id=call.message.chat.id,
            is_active=True
        ).exists()
        
        if not user.is_admin and not is_owner:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        promo_id = int(call.data.split('_')[-1])
        promo = PromoCode.objects.get(id=promo_id)
        promo_code = promo.code
        
        promo.delete()
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üóëÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_promocode_menu_markup()
        )
        bot.answer_callback_query(call.id, "–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promocode_delete: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def get_user_promocode(call: CallbackQuery) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"""
    try:
        user = User.objects.get(telegram_id=call.message.chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ–º–æ–∫–æ–¥
        if user.received_promocode:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"üé´ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!\n\n"
                     f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: **{user.received_promocode}**\n\n"
                     f"–û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–º–æ–∫–æ–¥.",
                parse_mode='Markdown'
            )
            bot.answer_callback_query(call.id, "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –ø–æ–ª—É—á–µ–Ω")
            return
        
        # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        available_promo = PromoCode.objects.filter(
            is_active=True,
            is_used=False
        ).first()
        
        if not available_promo:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.\n\n"
                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode='Markdown'
            )
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
            return
        
        # –í—ã–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        promo_code = available_promo.code
        user.received_promocode = promo_code
        user.save()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        available_promo.delete()
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!\n\n"
                 f"**–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}**\n\n"
                 f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!",
            parse_mode='Markdown'
        )
        bot.answer_callback_query(call.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_user_promocode: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
